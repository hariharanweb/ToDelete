CLANG(1)                   Clang Tools Documentation                  CLANG(1)



NNAAMMEE
       clang - the Clang C, C++, and Objective-C compiler

SSYYNNOOPPSSIISS
       ccllaanngg [--cc|--SS|--EE] --ssttdd==_s_t_a_n_d_a_r_d --gg
         [--OO00|--OO11|--OO22|--OOss|--OOzz|--OO33|--OO44]
         --WW_w_a_r_n_i_n_g_s_._._. --ppeeddaannttiicc
         --II_d_i_r_._._. --LL_d_i_r_._._.
         --DD_m_a_c_r_o_[_=_d_e_f_n_]
         --ff_f_e_a_t_u_r_e_-_o_p_t_i_o_n_._._.
         --mm_m_a_c_h_i_n_e_-_o_p_t_i_o_n_._._.
         --oo _o_u_t_p_u_t_-_f_i_l_e
         --ssttddlliibb==_l_i_b_r_a_r_y
         _i_n_p_u_t_-_f_i_l_e_n_a_m_e_s

DDEESSCCRRIIPPTTIIOONN
       ccllaanngg is a C, C++, and Objective-C compiler which encompasses
       preprocessing, parsing, optimization, code generation, assembly, and
       linking.  Depending on which high-level mode setting is passed, Clang
       will stop before doing a full link.  While Clang is highly integrated,
       it is important to understand the stages of compilation, to understand
       how to invoke it.  These stages are:

       DDrriivveerr
           The ccllaanngg executable is actually a small driver which controls the
           overall execution of other tools such as the compiler, assembler
           and linker.  Typically you do not need to interact with the driver,
           but you transparently use it to run the other tools.

       PPrreepprroocceessssiinngg
           This stage handles tokenization of the input source file, macro
           expansion, #include expansion and handling of other preprocessor
           directives.  The output of this stage is typically called a ".i"
           (for C), ".ii" (for C++), ".mi" (for Objective-C) , or ".mii" (for
           Objective-C++) file.

       PPaarrssiinngg aanndd SSeemmaannttiicc AAnnaallyyssiiss
           This stage parses the input file, translating preprocessor tokens
           into a parse tree.  Once in the form of a parser tree, it applies
           semantic analysis to compute types for expressions as well and
           determine whether the code is well formed. This stage is
           responsible for generating most of the compiler warnings as well as
           parse errors.  The output of this stage is an "Abstract Syntax
           Tree" (AST).

       CCooddee GGeenneerraattiioonn aanndd OOppttiimmiizzaattiioonn
           This stage translates an AST into low-level intermediate code
           (known as "LLVM IR") and ultimately to machine code.  This phase is
           responsible for optimizing the generated code and handling target-
           specific code generation.  The output of this stage is typically
           called a ".s" file or "assembly" file.

           Clang also supports the use of an integrated assembler, in which
           the code generator produces object files directly. This avoids the
           overhead of generating the ".s" file and of calling the target
           assembler.

       AAsssseemmbblleerr
           This stage runs the target assembler to translate the output of the
           compiler into a target object file.  The output of this stage is
           typically called a ".o" file or "object" file.

       LLiinnkkeerr
           This stage runs the target linker to merge multiple object files
           into an executable or dynamic library.  The output of this stage is
           typically called an "a.out", ".dylib" or ".so" file.

       The Clang compiler supports a large number of options to control each
       of these stages.  In addition to compilation of code, Clang also
       supports other tools:

       CCllaanngg SSttaattiicc AAnnaallyyzzeerr

       The Clang Static Analyzer is a tool that scans source code to try to
       find bugs through code analysis.  This tool uses many parts of Clang
       and is built into the same driver.

OOPPTTIIOONNSS
   SSttaaggee SSeelleeccttiioonn OOppttiioonnss
       --EE  Run the preprocessor stage.

       --ffssyynnttaaxx--oonnllyy
           Run the preprocessor, parser and type checking stages.

       --SS  Run the previous stages as well as LLVM generation and optimization
           stages and target-specific code generation, producing an assembly
           file.

       --cc  Run all of the above, plus the assembler, generating a target ".o"
           object file.

       nnoo ssttaaggee sseelleeccttiioonn ooppttiioonn
           If no stage selection option is specified, all stages above are
           run, and the linker is run to combine the results into an
           executable or shared library.

       ----aannaallyyzzee
           Run the Clang Static Analyzer.

   LLaanngguuaaggee SSeelleeccttiioonn aanndd MMooddee OOppttiioonnss
       --xx _l_a_n_g_u_a_g_e
           Treat subsequent input files as having type _l_a_n_g_u_a_g_e.

       --ssttdd=_l_a_n_g_u_a_g_e
           Specify the language standard to compile for.

       --ssttddlliibb=_l_a_n_g_u_a_g_e
           Specify the C++ standard library to use; supported options are
           libstdc++ and libc++.

       --aannssii
           Same as --ssttdd==cc8899.

       --OObbjjCC++++
           Treat source input files as Objective-C++ inputs.

       --OObbjjCC
           Treat source input files as Objective-C inputs.

       --ttrriiggrraapphhss
           Enable trigraphs.

       --ffffrreeeessttaannddiinngg
           Indicate that the file should be compiled for a freestanding, not a
           hosted, environment.

       --ffnnoo--bbuuiillttiinn
           Disable special handling and optimizations of builtin functions
           like strlen and malloc.

       --ffmmaatthh--eerrrrnnoo
           Indicate that math functions should be treated as updating errno.

       --ffppaassccaall--ssttrriinnggss
           Enable support for Pascal-style strings with "\pfoo".

       --ffmmss--eexxtteennssiioonnss
           Enable support for Microsoft extensions.

       --ffmmsscc--vveerrssiioonn==
           Set _MSC_VER. Defaults to 1300 on Windows. Not set otherwise.

       --ffbboorrllaanndd--eexxtteennssiioonnss
           Enable support for Borland extensions.

       --ffwwrriittaabbllee--ssttrriinnggss
           Make all string literals default to writable.  This disables
           uniquing of strings and other optimizations.

       --ffllaaxx--vveeccttoorr--ccoonnvveerrssiioonnss
           Allow loose type checking rules for implicit vector conversions.

       --ffbblloocckkss
           Enable the "Blocks" language feature.

       --ffoobbjjcc--ggcc--oonnllyy
           Indicate that Objective-C code should be compiled in GC-only mode,
           which only works when Objective-C Garbage Collection is enabled.

       --ffoobbjjcc--ggcc
           Indicate that Objective-C code should be compiled in hybrid-GC
           mode, which works with both GC and non-GC mode.

       --ffoobbjjcc--aabbii--vveerrssiioonn=_v_e_r_s_i_o_n
           Select the Objective-C ABI version to use. Available versions are 1
           (legacy "fragile" ABI), 2 (non-fragile ABI 1), and 3 (non-fragile
           ABI 2).

       --ffoobbjjcc--nnoonnffrraaggiillee--aabbii--vveerrssiioonn=_v_e_r_s_i_o_n
           Select the Objective-C non-fragile ABI version to use by default.
           This will only be used as the Objective-C ABI when the non-fragile
           ABI is enabled (either via -fobjc-nonfragile-abi, or because it is
           the platform default).

       --ffoobbjjcc--nnoonnffrraaggiillee--aabbii
           Enable use of the Objective-C non-fragile ABI. On platforms for
           which this is the default ABI, it can be disabled with
           --ffnnoo--oobbjjcc--nnoonnffrraaggiillee--aabbii.

   TTaarrggeett SSeelleeccttiioonn OOppttiioonnss
       Clang fully supports cross compilation as an inherent part of its
       design.  Depending on how your version of Clang is configured, it may
       have support for a number of cross compilers, or may only support a
       native target.

       --aarrcchh _a_r_c_h_i_t_e_c_t_u_r_e
           Specify the architecture to build for.

       --mmmmaaccoossxx--vveerrssiioonn--mmiinn=_v_e_r_s_i_o_n
           When building for Mac OS/X, specify the minimum version supported
           by your application.

       --mmiipphhoonneeooss--vveerrssiioonn--mmiinn
           When building for iPhone OS, specify the minimum version supported
           by your application.

       --mmaarrcchh=_c_p_u
           Specify that Clang should generate code for a specific processor
           family member and later.  For example, if you specify -march=i486,
           the compiler is allowed to generate instructions that are valid on
           i486 and later processors, but which may not exist on earlier ones.

   CCooddee GGeenneerraattiioonn OOppttiioonnss
       --OO00 --OO11 --OO22 --OOss --OOzz --OO33 --OO44
           Specify which optimization level to use.  --OO00 means "no
           optimization": this level compiles the fastest and generates the
           most debuggable code.  --OO22 is a moderate level of optimization
           which enables most optimizations.  --OOss is like --OO22 with extra
           optimizations to reduce code size.  --OOzz is like --OOss (and thus --OO22),
           but reduces code size further.  --OO33 is like --OO22, except that it
           enables optimizations that take longer to perform or that may
           generate larger code (in an attempt to make the program run
           faster).  On supported platforms, --OO44 enables link-time
           optimization; object files are stored in the LLVM bitcode file
           format and whole program optimization is done at link time. --OO11 is
           somewhere between --OO00 and --OO22.

       --gg  Generate debug information.  Note that Clang debug information
           works best at --OO00.  At higher optimization levels, only line number
           information is currently available.

       --ffeexxcceeppttiioonnss
           Enable generation of unwind information, this allows exceptions to
           be thrown through Clang compiled stack frames.  This is on by
           default in x86-64.

       --ffttrraappvv
           Generate code to catch integer overflow errors.  Signed integer
           overflow is undefined in C, with this flag, extra code is generated
           to detect this and abort when it happens.

       --ffvviissiibbiilliittyy
           This flag sets the default visibility level.

       --ffccoommmmoonn
           This flag specifies that variables without initializers get common
           linkage.  It can be disabled with --ffnnoo--ccoommmmoonn.

       --ffllttoo --eemmiitt--llllvvmm
           Generate output files in LLVM formats, suitable for link time
           optimization. When used with --SS this generates LLVM intermediate
           language assembly files, otherwise this generates LLVM bitcode
           format object files (which may be passed to the linker depending on
           the stage selection options).

   DDrriivveerr OOppttiioonnss
       --######
           Print the commands to run for this compilation.

       ----hheellpp
           Display available options.

       --QQuunnuusseedd--aarrgguummeennttss
           Don't emit warning for unused driver arguments.

       --WWaa,,_a_r_g_s
           Pass the comma separated arguments in _a_r_g_s to the assembler.

       --WWll,,_a_r_g_s
           Pass the comma separated arguments in _a_r_g_s to the linker.

       --WWpp,,_a_r_g_s
           Pass the comma separated arguments in _a_r_g_s to the preprocessor.

       --XXaannaallyyzzeerr _a_r_g
           Pass _a_r_g to the static analyzer.

       --XXaasssseemmbblleerr _a_r_g
           Pass _a_r_g to the assembler.

       --XXlliinnkkeerr _a_r_g
           Pass _a_r_g to the linker.

       --XXpprreepprroocceessssoorr _a_r_g
           Pass _a_r_g to the preprocessor.

       --oo _f_i_l_e
           Write output to _f_i_l_e.

       --pprriinntt--ffiillee--nnaammee=_f_i_l_e
           Print the full library path of _f_i_l_e.

       --pprriinntt--lliibbggcccc--ffiillee--nnaammee
           Print the library path for "libgcc.a".

       --pprriinntt--pprroogg--nnaammee=_n_a_m_e
           Print the full program path of _n_a_m_e.

       --pprriinntt--sseeaarrcchh--ddiirrss
           Print the paths used for finding libraries and programs.

       --ssaavvee--tteemmppss
           Save intermediate compilation results.

       --iinntteeggrraatteedd--aass --nnoo--iinntteeggrraatteedd--aass
           Used to enable and disable, respectively, the use of the integrated
           assembler. Whether the integrated assembler is on by default is
           target dependent.

       --ttiimmee
           Time individual commands.

       --ffttiimmee--rreeppoorrtt
           Print timing summary of each stage of compilation.

       --vv  Show commands to run and use verbose output.

   DDiiaaggnnoossttiiccss OOppttiioonnss
       --ffsshhooww--ccoolluummnn --ffsshhooww--ssoouurrccee--llooccaattiioonn --ffccaarreett--ddiiaaggnnoossttiiccss
       --ffddiiaaggnnoossttiiccss--ffiixxiitt--iinnffoo --ffddiiaaggnnoossttiiccss--ppaarrsseeaabbllee--ffiixxiittss
       --ffddiiaaggnnoossttiiccss--pprriinntt--ssoouurrccee--rraannggee--iinnffoo --ffpprriinntt--ssoouurrccee--rraannggee--iinnffoo
       --ffddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn --ffmmeessssaaggee--lleennggtthh
           These options control how Clang prints out information about
           diagnostics (errors and warnings).  Please see the Clang User's
           Manual for more information.

   PPrreepprroocceessssoorr OOppttiioonnss
       --DD_m_a_c_r_o_n_a_m_e_=_v_a_l_u_e
           Adds an implicit #define into the predefines buffer which is read
           before the source file is preprocessed.

       --UU_m_a_c_r_o_n_a_m_e
           Adds an implicit #undef into the predefines buffer which is read
           before the source file is preprocessed.

       --iinncclluuddee _f_i_l_e_n_a_m_e
           Adds an implicit #include into the predefines buffer which is read
           before the source file is preprocessed.

       --II_d_i_r_e_c_t_o_r_y
           Add the specified directory to the search path for include files.

       --FF_d_i_r_e_c_t_o_r_y
           Add the specified directory to the search path for framework
           include files.

       --nnoossttddiinncc
           Do not search the standard system directories or compiler builtin
           directories for include files.

       --nnoossttddlliibbiinncc
           Do not search the standard system directories for include files,
           but do search compiler builtin include directories.

       --nnoobbuuiillttiinniinncc
           Do not search clang's builtin directory for include files.

EENNVVIIRROONNMMEENNTT
       TTMMPPDDIIRR, TTEEMMPP, TTMMPP
           These environment variables are checked, in order, for the location
           to write temporary files used during the compilation process.

       CCPPAATTHH
           If this environment variable is present, it is treated as a
           delimited list of paths to be added to the default system include
           path list. The delimiter is the platform dependent delimitor, as
           used in the _P_A_T_H environment variable.

           Empty components in the environment variable are ignored.

       CC__IINNCCLLUUDDEE__PPAATTHH, OOBBJJCC__IINNCCLLUUDDEE__PPAATTHH, CCPPLLUUSS__IINNCCLLUUDDEE__PPAATTHH,
       OOBBJJCCPPLLUUSS__IINNCCLLUUDDEE__PPAATTHH
           These environment variables specify additional paths, as for CPATH,
           which are only used when processing the appropriate language.

       MMAACCOOSSXX__DDEEPPLLOOYYMMEENNTT__TTAARRGGEETT
           If -mmacosx-version-min is unspecified, the default deployment
           target is read from this environment variable.  This option only
           affects darwin targets.

BBUUGGSS
       To report bugs, please visit <http://llvm.org/bugs/>.  Most bug reports
       should include preprocessed source files (use the --EE option) and the
       full output of the compiler, along with information to reproduce.

SSEEEE AALLSSOO
        as(1), ld(1)

AAUUTTHHOORR
       Maintained by the Clang / LLVM Team (<http://clang.llvm.org>).



clang 4.0                         2012-04-19                          CLANG(1)
